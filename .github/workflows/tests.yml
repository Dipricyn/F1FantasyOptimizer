# Run tests

name: "Tests"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

defaults:
  run:
    shell: bash

jobs:
  tests:
    name: "Python ${{ matrix.python-version }} on ${{ matrix.os }}"
    runs-on: "${{ matrix.os }}"

    strategy:
      matrix:
        os: [ Windows, Ubuntu ]
        python-version: [ "3.10" ]
        include:
          - os: Ubuntu
            image: ubuntu-22.04
          - os: Windows
            image: windows-2022
          - python-version: "3.10"
            tox-env: "py310"
      fail-fast: false

    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"

      - name: "Set up Python"
        uses: "actions/setup-python@v4"
        with:
          python-version: "${{ matrix.python-version }}"

      - name: "Install dependencies"
        run: |
          python -m pip install tox tox-gh-actions pytest-github-actions-annotate-failures

      - name: "Run tox for ${{ matrix.python-version }}"
        run: |
          python -m tox -e ${{ matrix.tox-env }}

      - name: "Upload coverage data"
        uses: actions/upload-artifact@v3
        with:
          name: coverage_data
          path: tox-.coverage.*

  coverage:
    name: Coverage
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out the Repository
        uses: actions/checkout@v3

      - name: Install `python` ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox coverage
          python -m pip install pytest-github-actions-annotate-failures

      - name: Download Coverage Artifacts
        uses: actions/download-artifact@v3
        with:
          name: coverage_data

      - name: Combine Coverage Results
        run: |
          python -m tox -e coverage
          export TOTAL=$(python -c "import json;print(json.load(open('logs/coverage/coverage.json'))['totals']['percent_covered_display'])")
          echo "total_coverage=$TOTAL" >> $GITHUB_ENV
          echo "### Total coverage: ${TOTAL}%" >> $GITHUB_STEP_SUMMARY

      - name: "Make badge"
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          # GIST_TOKEN is a GitHub personal access token with scope "gist".
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: 34c160c16ac568a64c1cae0afddfc531
          filename: covbadge.json
          label: Coverage
          message: ${{ env.total }}%
          minColorRange: 50
          maxColorRange: 90
          valColorRange: ${{ env.total }}